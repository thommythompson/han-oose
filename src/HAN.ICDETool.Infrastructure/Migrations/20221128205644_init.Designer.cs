// <auto-generated />
using System;
using HAN.ICDETool.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HAN.ICDETool.Infrastructure.Migrations
{
    [DbContext(typeof(ICDEContext))]
    [Migration("20221128205644_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HAN.ICDETool.Core.Adres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Huisnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocatieId")
                        .HasColumnType("int");

                    b.Property<string>("Plaatsnaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Toevoeging")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocatieId")
                        .IsUnique();

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Beoordeling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TentamenUitvoeringId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TentamenUitvoeringId");

                    b.ToTable("Beoordeling");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.BeoordelingsCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RubricId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RubricId");

                    b.ToTable("BeoordelingsCriteria");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.BeroepsProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseInrichtingId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseWeekInrichtingId")
                        .HasColumnType("int");

                    b.Property<int>("TeBehalenStudiepunten")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weging")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseInrichtingId");

                    b.HasIndex("CourseWeekInrichtingId");

                    b.ToTable("BeroepsProduct");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseInrichting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDefintief")
                        .HasColumnType("bit");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseInrichting");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseUitvoering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseInrichtingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDatum")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CourseInrichtingId");

                    b.ToTable("CourseUitvoering");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekInrichting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseWeekPlanningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseWeekPlanningId");

                    b.ToTable("CourseWeekInrichting");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekPlanning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseInrichtingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseInrichtingId")
                        .IsUnique();

                    b.ToTable("CourseWeekPlanning");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekUitvoering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseUitvoeringId")
                        .HasColumnType("int");

                    b.Property<int>("CourseWeekInrichtingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseUitvoeringId");

                    b.HasIndex("CourseWeekInrichtingId");

                    b.ToTable("CourseWeekUitvoering");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Docent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Docent");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.EenheidVanLeeruitkomsten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseInrichtingId")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseInrichtingId");

                    b.ToTable("EenheidVanLeeruitkomsten");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Klas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocentId")
                        .IsUnique()
                        .HasFilter("[DocentId] IS NOT NULL");

                    b.ToTable("Klas");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Leerdoel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeeruitkomstId")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeeruitkomstId");

                    b.ToTable("Leerdoel");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Leeruitkomst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EenheidVanLeeruitkomstenId")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EenheidVanLeeruitkomstenId");

                    b.ToTable("Leeruitkomst");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesInrichting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseInrichtingId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseWeekInrichtingId")
                        .HasColumnType("int");

                    b.Property<int>("LeerdoelId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseInrichtingId");

                    b.HasIndex("CourseWeekInrichtingId");

                    b.HasIndex("LeerdoelId");

                    b.ToTable("LesInrichting");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesMateriaal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LesInrichtingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LesInrichtingId");

                    b.ToTable("LesMateriaal");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesMateriaalLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LesMateriaalId")
                        .HasColumnType("int");

                    b.Property<int>("LesMateriaalLineId")
                        .HasColumnType("int");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LesMateriaalId");

                    b.ToTable("LesMateriaalLine");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesUitvoering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseWeekUitvoeringId")
                        .HasColumnType("int");

                    b.Property<int?>("DocentId")
                        .HasColumnType("int");

                    b.Property<int?>("LocatieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseWeekUitvoeringId");

                    b.HasIndex("DocentId");

                    b.HasIndex("LocatieId");

                    b.ToTable("LesUitvoering");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Locatie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LocatieType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locatie");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Opleiding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opleiding");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.OpleidingsProfiel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpleidingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpleidingId");

                    b.ToTable("OpleidingsProfiel");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Rubric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeroepsProductId")
                        .HasColumnType("int");

                    b.Property<int>("KnockoutThreshold")
                        .HasColumnType("int");

                    b.Property<int>("LeerdoelId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoldoendeThreshold")
                        .HasColumnType("int");

                    b.Property<int>("Weging")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeroepsProductId");

                    b.HasIndex("LeerdoelId");

                    b.ToTable("Rubric");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.SchriftelijkeToets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseInrichtingId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseWeekInrichtingId")
                        .HasColumnType("int");

                    b.Property<int>("LeerdoelId")
                        .HasColumnType("int");

                    b.Property<int>("TeBehalenStudiepunten")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weging")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseInrichtingId");

                    b.HasIndex("CourseWeekInrichtingId");

                    b.HasIndex("LeerdoelId");

                    b.ToTable("SchriftelijkeToets");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseUitvoeringId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KlasId")
                        .HasColumnType("int");

                    b.Property<int?>("OpleidingsProfielId")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseUitvoeringId");

                    b.HasIndex("KlasId");

                    b.HasIndex("OpleidingsProfielId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.TentamenUitvoering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeroepsProductId")
                        .HasColumnType("int");

                    b.Property<int>("CourseUitvoeringId")
                        .HasColumnType("int");

                    b.Property<int>("CourseWeekUitvoeringId")
                        .HasColumnType("int");

                    b.Property<int?>("DocentId")
                        .HasColumnType("int");

                    b.Property<int?>("LocatieId")
                        .HasColumnType("int");

                    b.Property<int?>("SchriftelijkeToetsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeroepsProductId");

                    b.HasIndex("CourseWeekUitvoeringId");

                    b.HasIndex("DocentId");

                    b.HasIndex("LocatieId");

                    b.HasIndex("SchriftelijkeToetsId");

                    b.ToTable("TentamenUitvoering");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Adres", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.Locatie", null)
                        .WithOne("Adres")
                        .HasForeignKey("HAN.ICDETool.Core.Adres", "LocatieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Beoordeling", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.Docent", "BeoordeeldDoor")
                        .WithMany("Beoordelingen")
                        .HasForeignKey("DocentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.Student", "BeoordelingVoor")
                        .WithMany("Beoordelingen")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.TentamenUitvoering", "TentamenUitvoering")
                        .WithMany("Beoordelingen")
                        .HasForeignKey("TentamenUitvoeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeoordeeldDoor");

                    b.Navigation("BeoordelingVoor");

                    b.Navigation("TentamenUitvoering");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.BeoordelingsCriteria", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.Rubric", null)
                        .WithMany("BeoordelingsCriteria")
                        .HasForeignKey("RubricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.BeroepsProduct", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseInrichting", null)
                        .WithMany("BeroepsProducten")
                        .HasForeignKey("CourseInrichtingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.CourseWeekInrichting", null)
                        .WithMany("BeroepsProduct")
                        .HasForeignKey("CourseWeekInrichtingId");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseUitvoering", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseInrichting", "CourseInrichting")
                        .WithMany("CourseUitvoeringen")
                        .HasForeignKey("CourseInrichtingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseInrichting");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekInrichting", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseWeekPlanning", null)
                        .WithMany("Weken")
                        .HasForeignKey("CourseWeekPlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekPlanning", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseInrichting", null)
                        .WithOne("Planning")
                        .HasForeignKey("HAN.ICDETool.Core.CourseWeekPlanning", "CourseInrichtingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekUitvoering", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseUitvoering", null)
                        .WithMany("Weken")
                        .HasForeignKey("CourseUitvoeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.CourseWeekInrichting", "CourseWeekInrichting")
                        .WithMany("CourseWeekUitvoeringen")
                        .HasForeignKey("CourseWeekInrichtingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CourseWeekInrichting");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.EenheidVanLeeruitkomsten", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseInrichting", null)
                        .WithMany("Evls")
                        .HasForeignKey("CourseInrichtingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Klas", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.Docent", "Mentor")
                        .WithOne("MentorVan")
                        .HasForeignKey("HAN.ICDETool.Core.Klas", "DocentId");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Leerdoel", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.Leeruitkomst", null)
                        .WithMany("Leerdoelen")
                        .HasForeignKey("LeeruitkomstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Leeruitkomst", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.EenheidVanLeeruitkomsten", null)
                        .WithMany("Leeruitkomsten")
                        .HasForeignKey("EenheidVanLeeruitkomstenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesInrichting", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseInrichting", null)
                        .WithMany("Lessen")
                        .HasForeignKey("CourseInrichtingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.CourseWeekInrichting", null)
                        .WithMany("Lessen")
                        .HasForeignKey("CourseWeekInrichtingId");

                    b.HasOne("HAN.ICDETool.Core.Leerdoel", "Leerdoel")
                        .WithMany("GekoppeldeLessen")
                        .HasForeignKey("LeerdoelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Leerdoel");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesMateriaal", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.LesInrichting", null)
                        .WithMany("LesMateriaal")
                        .HasForeignKey("LesInrichtingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesMateriaalLine", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.LesMateriaal", null)
                        .WithMany("Inhoud")
                        .HasForeignKey("LesMateriaalId");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesUitvoering", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseWeekUitvoering", "CourseWeekUitvoering")
                        .WithMany("Lessen")
                        .HasForeignKey("CourseWeekUitvoeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.Docent", "Docent")
                        .WithMany("LesUitvoeringen")
                        .HasForeignKey("DocentId");

                    b.HasOne("HAN.ICDETool.Core.Locatie", "Locatie")
                        .WithMany("LesUitvoeringen")
                        .HasForeignKey("LocatieId");

                    b.Navigation("CourseWeekUitvoering");

                    b.Navigation("Docent");

                    b.Navigation("Locatie");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.OpleidingsProfiel", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.Opleiding", null)
                        .WithMany("OpleidingsProfielen")
                        .HasForeignKey("OpleidingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Rubric", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.BeroepsProduct", null)
                        .WithMany("Rubrics")
                        .HasForeignKey("BeroepsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.Leerdoel", "Leerdoel")
                        .WithMany("GekoppeldeRubrics")
                        .HasForeignKey("LeerdoelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Leerdoel");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.SchriftelijkeToets", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseInrichting", null)
                        .WithMany("Toetsen")
                        .HasForeignKey("CourseInrichtingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.CourseWeekInrichting", null)
                        .WithMany("SchriftelijkeToets")
                        .HasForeignKey("CourseWeekInrichtingId");

                    b.HasOne("HAN.ICDETool.Core.Leerdoel", "Leerdoel")
                        .WithMany("GekoppeldeToetsen")
                        .HasForeignKey("LeerdoelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Leerdoel");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Student", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.CourseUitvoering", "VolgCourse")
                        .WithMany()
                        .HasForeignKey("CourseUitvoeringId");

                    b.HasOne("HAN.ICDETool.Core.Klas", null)
                        .WithMany("Studenten")
                        .HasForeignKey("KlasId");

                    b.HasOne("HAN.ICDETool.Core.OpleidingsProfiel", "VolgtProfiel")
                        .WithMany("GevolgdDoor")
                        .HasForeignKey("OpleidingsProfielId");

                    b.Navigation("VolgCourse");

                    b.Navigation("VolgtProfiel");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.TentamenUitvoering", b =>
                {
                    b.HasOne("HAN.ICDETool.Core.BeroepsProduct", "BeroepsProduct")
                        .WithMany("TentamenUitvoeringen")
                        .HasForeignKey("BeroepsProductId");

                    b.HasOne("HAN.ICDETool.Core.CourseWeekUitvoering", "CourseWeekUitvoering")
                        .WithMany("Tentamen")
                        .HasForeignKey("CourseWeekUitvoeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HAN.ICDETool.Core.Docent", "Docent")
                        .WithMany("TentamenUitvoeringen")
                        .HasForeignKey("DocentId");

                    b.HasOne("HAN.ICDETool.Core.Locatie", "Locatie")
                        .WithMany("TentamenUitvoeringen")
                        .HasForeignKey("LocatieId");

                    b.HasOne("HAN.ICDETool.Core.SchriftelijkeToets", "SchriftelijkeToets")
                        .WithMany("TentamenUitvoeringen")
                        .HasForeignKey("SchriftelijkeToetsId");

                    b.Navigation("BeroepsProduct");

                    b.Navigation("CourseWeekUitvoering");

                    b.Navigation("Docent");

                    b.Navigation("Locatie");

                    b.Navigation("SchriftelijkeToets");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.BeroepsProduct", b =>
                {
                    b.Navigation("Rubrics");

                    b.Navigation("TentamenUitvoeringen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseInrichting", b =>
                {
                    b.Navigation("BeroepsProducten");

                    b.Navigation("CourseUitvoeringen");

                    b.Navigation("Evls");

                    b.Navigation("Lessen");

                    b.Navigation("Planning");

                    b.Navigation("Toetsen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseUitvoering", b =>
                {
                    b.Navigation("Weken");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekInrichting", b =>
                {
                    b.Navigation("BeroepsProduct");

                    b.Navigation("CourseWeekUitvoeringen");

                    b.Navigation("Lessen");

                    b.Navigation("SchriftelijkeToets");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekPlanning", b =>
                {
                    b.Navigation("Weken");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.CourseWeekUitvoering", b =>
                {
                    b.Navigation("Lessen");

                    b.Navigation("Tentamen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Docent", b =>
                {
                    b.Navigation("Beoordelingen");

                    b.Navigation("LesUitvoeringen");

                    b.Navigation("MentorVan");

                    b.Navigation("TentamenUitvoeringen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.EenheidVanLeeruitkomsten", b =>
                {
                    b.Navigation("Leeruitkomsten");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Klas", b =>
                {
                    b.Navigation("Studenten");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Leerdoel", b =>
                {
                    b.Navigation("GekoppeldeLessen");

                    b.Navigation("GekoppeldeRubrics");

                    b.Navigation("GekoppeldeToetsen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Leeruitkomst", b =>
                {
                    b.Navigation("Leerdoelen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesInrichting", b =>
                {
                    b.Navigation("LesMateriaal");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.LesMateriaal", b =>
                {
                    b.Navigation("Inhoud");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Locatie", b =>
                {
                    b.Navigation("Adres");

                    b.Navigation("LesUitvoeringen");

                    b.Navigation("TentamenUitvoeringen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Opleiding", b =>
                {
                    b.Navigation("OpleidingsProfielen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.OpleidingsProfiel", b =>
                {
                    b.Navigation("GevolgdDoor");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Rubric", b =>
                {
                    b.Navigation("BeoordelingsCriteria");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.SchriftelijkeToets", b =>
                {
                    b.Navigation("TentamenUitvoeringen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.Student", b =>
                {
                    b.Navigation("Beoordelingen");
                });

            modelBuilder.Entity("HAN.ICDETool.Core.TentamenUitvoering", b =>
                {
                    b.Navigation("Beoordelingen");
                });
#pragma warning restore 612, 618
        }
    }
}
